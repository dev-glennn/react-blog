{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loding.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","pages/PostListPage.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/LoginPage.js","containers/auth/RegisterForm.js","pages/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","containers/post/PostViewerContainer.js","pages/PostPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","CHECK","CHECK_SUCCESS","CHECK_FAILURE","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","useEffect","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","PostListPage","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWidthMarginTop","ErrorMessage","textMap","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","authComplete","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","updatePost","id","setOriginalPost","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","TagList","TagBox","onChangeTags","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","match","postId","params","a","delete","ownPost","PostPage","App","component","path","exact","Boolean","window","hostname","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b828b79d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ResponsiveBlock = styled.div`\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n    width: 1024px;\r\n    margin: 0 auto;\r\n    \r\n    @media (max-width: 1024px) {\r\n        width: 768px;\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst Responsive = ({children, ...rest}) => {\r\n    return (\r\n        <ResponsiveBlock {...rest}>\r\n            {children}\r\n        </ResponsiveBlock>\r\n    );\r\n};\r\n\r\nexport default Responsive;","// source: https://yeun.github.io/open-color/\r\n\r\nconst palette = {\r\n    gray: [\r\n        '#f8f9fa',\r\n        '#f1f3f5',\r\n        '#e9ecef',\r\n        '#dee2e6',\r\n        '#ced4da',\r\n        '#adb5bd',\r\n        '#868e96',\r\n        '#495057',\r\n        '#343a40',\r\n        '#212529',\r\n    ],\r\n    cyan: [\r\n        '#e3fafc',\r\n        '#c5f6fa',\r\n        '#99e9f2',\r\n        '#66d9e8',\r\n        '#3bc9db',\r\n        '#22b8cf',\r\n        '#15aabf',\r\n        '#1098ad',\r\n        '#0c8599',\r\n        '#0b7285',\r\n    ],\r\n};\r\n\r\nexport default palette;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport palette from '../../lib/styles/palette'\r\n\r\nconst buttonStyle = css`\r\n    border: none;\r\n    border-radius: 4px;\r\n    font-size: 1rem;\r\n    font-weight: bold;\r\n    padding: 0.25rem; 1rem;\r\n    color: white;\r\n    outline: none;\r\n    cursor: pointer;\r\n    \r\n    background: ${palette.gray[8]};\r\n    &:hover {\r\n        background: ${palette.gray[6]};\r\n    }\r\n    \r\n    ${props =>\r\n    props.fullWidth &&\r\n    css`\r\n        padding-top: 0.75rem;\r\n        padding-bottom: 0.75rem;\r\n        width: 100%;\r\n        font-size: 1.125rem;\r\n    `\r\n}\r\n    \r\n    ${props =>\r\n    props.cyan &&\r\n    css`\r\n        background: ${palette.cyan[5]};\r\n        &:hover {\r\n            background: ${palette.cyan[4]};\r\n        }\r\n    `\r\n}\r\n    &:disabled {\r\n        background: ${palette.gray[3]};\r\n        color: ${palette.gray[5]};\r\n        cursor: not-allowed;\r\n    }\r\n`\r\n\r\nconst StyledButton = styled.button`\r\n    ${buttonStyle}\r\n`\r\n\r\nconst StyledLink = styled(Link)`\r\n    ${buttonStyle}\r\n`\r\n\r\nconst Button = props => {\r\n    return props.to ? (\r\n        <StyledLink {...props} cyan={props.cyan ? 1 : 0}/>\r\n    ) : (\r\n        <StyledButton {...props}/>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Responsive from \"./Responsive\";\r\nimport Button from \"./Button\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst HeaderBlock = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    background: white;\r\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\nconst Wrapper = styled(Responsive)`\r\n    height: 4rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    .logo {\r\n        font-size: 1.125rem;\r\n        font-weight: 800;\r\n        letter-spacing: 2px;\r\n    }\r\n    .right {\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n`\r\n\r\nconst Spacer = styled.div`\r\n    height: 4rem;\r\n`\r\n\r\nconst UserInfo = styled.div`\r\n    font-weight: 800;\r\n    margin-right: 1rem;\r\n`\r\n\r\nconst Header = ({user, onLogout}) => {\r\n    return (\r\n        <>\r\n            <HeaderBlock>\r\n                <Wrapper>\r\n                    <Link to=\"/\" className=\"logo\">REACTERS</Link>\r\n                    {user ? (\r\n                        <div className=\"right\">\r\n                            <UserInfo>{user.username}</UserInfo>\r\n                            <Button onClick={onLogout}>로그아웃</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"right\">\r\n                            <Button to=\"/login\">로그인</Button>\r\n                        </div>\r\n                    )}\r\n                </Wrapper>\r\n            </HeaderBlock>\r\n            <Spacer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Header;","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n글로벌 설정 예시:\r\n// API 주소를 다른 곳으로 사용함\r\nclient.defaults.baseURL = 'https://external-api-server.com/'\r\n\r\n// 헤더 설정\r\nclient.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n\r\n// 인터셉터 설정\r\naxios.intercepter.response.use(\r\n    response => {\r\n        // 요청 성공 시 특정 작업 수행\r\n        return response;\r\n    },\r\n    error => {\r\n        // 요청 실패 시 특정 작업 수행\r\n        return Promise.reject(error);\r\n    }\r\n)\r\n */\r\n\r\nexport default client;","import client from './client';\r\n\r\n// 로그인\r\nexport const login = ({username, password}) =>\r\n    client.post('/api/auth/login', {username, password});\r\n\r\n\r\n// 회원가입\r\nexport const register = ({username, password}) =>\r\n    client.post('/api/auth/register', {username, password});\r\n\r\n\r\n// 로그인 상태 확인\r\nexport const check = () => client.get('/api/auth/check');\r\n\r\n// 로그아웃\r\nexport const logout = () => client.post('/api/auth/logout');","import {createAction, handleActions} from 'redux-actions';\r\n\r\nconst START_LOADING = 'loading/START_LOADING';\r\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\r\n\r\n/*\r\n 요청을 위한 액션 타입을 payload 로 설정합니다. (예: \"sample/GET_POST\")\r\n */\r\n\r\nexport const startLoading = createAction(START_LOADING, requestType => requestType);\r\n\r\nexport const finishLoading = createAction(FINISH_LOADING, requestType => requestType);\r\n\r\nconst initialState = {};\r\n\r\nconst loading = handleActions({\r\n        [START_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: true,\r\n        }),\r\n        [FINISH_LOADING]: (state, action) => ({\r\n            ...state,\r\n            [action.payload]: false,\r\n        }),\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default loading;","import {call, put} from 'redux-saga/effects';\r\nimport {startLoading, finishLoading} from \"../modules/loding\";\r\n\r\nexport const createRequestActionTypes = type => {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n    return [type, SUCCESS, FAILURE];\r\n}\r\n\r\nexport default function createRequestSaga(type, request) {\r\n    const SUCCESS = `${type}_SUCCESS`;\r\n    const FAILURE = `${type}_FAILURE`;\r\n\r\n    return function* (action) {\r\n        yield put(startLoading(type)); // 로딩 시작\r\n        try {\r\n            const response = yield call(request, action.payload);\r\n            yield put({\r\n                type: SUCCESS,\r\n                payload: response.data,\r\n                meta: response,\r\n            });\r\n        } catch (e) {\r\n            yield put({\r\n                type: FAILURE,\r\n                payload: e,\r\n                error: true,\r\n            });\r\n        }\r\n        yield put(finishLoading(type)) // 로딩 끝\r\n    }\r\n}","import {createAction, handleActions} from 'redux-actions';\r\nimport {takeLatest, call} from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\nimport createRequestSaga, {\r\n    createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\n\r\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\r\n// 회원 정보 확인\r\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes('user/CHECK',);\r\nconst LOGOUT = 'user/LOGOUT';\r\n\r\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\r\nexport const check = createAction(CHECK);\r\nexport const logout = createAction(LOGOUT);\r\n\r\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\r\n\r\nfunction checkFailureSaga() {\r\n    try {\r\n        localStorage.removeItem('user');\r\n    } catch (e) {\r\n        console.log('localStorage is not working');\r\n    }\r\n}\r\n\r\nfunction* logoutSaga() {\r\n    try {\r\n        yield call(authAPI.logout);\r\n        localStorage.removeItem('user');\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(CHECK, checkSaga);\r\n    yield takeLatest(CHECK_FAILURE, checkFailureSaga);\r\n    yield takeLatest(LOGOUT, logoutSaga);\r\n}\r\n\r\nconst initialState = {\r\n    user: null,\r\n    checkError: null,\r\n};\r\n\r\nexport default handleActions({\r\n        [TEMP_SET_USER]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n        }),\r\n        [CHECK_SUCCESS]: (state, {payload: user}) => ({\r\n            ...state,\r\n            user,\r\n            checkError: null,\r\n        }),\r\n        [CHECK_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            user: null,\r\n            checkError: error,\r\n        }),\r\n        [LOGOUT]: state => ({\r\n            ...state,\r\n            user: null,\r\n        }),\r\n    },\r\n    initialState\r\n);","import React from \"react\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport Header from \"../../components/common/Header\";\r\nimport {logout} from \"../../modules/user\";\r\n\r\nconst HeaderContainer = () => {\r\n    const {user} = useSelector(({user}) => ({user: user.user}));\r\n    const dispatch = useDispatch();\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    }\r\n    return <Header user={user} onLogout={onLogout}/>;\r\n};\r\n\r\nexport default HeaderContainer;","import React from \"react\";\r\nimport styled, {css} from \"styled-components\";\r\nimport {Link} from 'react-router-dom';\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst SubInfoBlock = styled.div`\r\n    ${props =>\r\n    props.hasMarginTop &&\r\n    css`\r\n         margin-top: 1rem;   \r\n    `}\r\n    color: ${palette.gray[6]};\r\n    \r\n    span + span:before {\r\n        color: ${palette.gray[4]};\r\n        padding-left: 0.25rem;\r\n        padding-right: 0.25rem;\r\n        content: '\\\\B7';\r\n    }\r\n`;\r\n\r\nconst SubInfo = ({username, publishedDate, hasMarginTop}) => {\r\n    return (\r\n        <SubInfoBlock hasMarginTop={hasMarginTop}>\r\n            <span>\r\n                <b>\r\n                    <Link to={`/@${username}`}>{username}</Link>\r\n                </b>\r\n            </span>\r\n            <span>{new Date(publishedDate).toLocaleDateString()}</span>\r\n        </SubInfoBlock>\r\n    );\r\n};\r\n\r\nexport default SubInfo;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst TagsBlock = styled.div`\r\n    margin-top: 0.5rem;\r\n    .tag {\r\n        display: inline-block;\r\n        color: ${palette.cyan[7]};\r\n        text-decoration: none;\r\n        margin-right: 0.5rem;\r\n        &:hover {\r\n            color: ${palette.cyan[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tags = ({tags}) => {\r\n    return (\r\n        <TagsBlock>\r\n            {tags.map(tag => (\r\n                <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\r\n                    #{tag}\r\n                </Link>\r\n            ))}\r\n        </TagsBlock>\r\n    );\r\n};\r\n\r\nexport default Tags;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Responsive from \"../common/Responsive\";\r\nimport Button from \"../common/Button\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport SubInfo from \"../common/SubInfo\";\r\nimport Tags from '../common/Tags'\r\n\r\nconst PostListBlock = styled(Responsive)`\r\n    margin-top: 3rem;\r\n`;\r\n\r\nconst WritePostButtonWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 3rem;\r\n`;\r\n\r\nconst PostItemBlock = styled.div`\r\n    padding-top: 3rem;\r\n    padding-bottom: 3rem;\r\n    &:first-child {\r\n        padding-top: 0;\r\n    }\r\n    & + & {\r\n        border-top: 1px solid ${palette.gray[2]}\r\n    }\r\n    h2 {\r\n        font-size: 2rem;\r\n        margin-bottom: 0;\r\n        margin-top: 0;\r\n        &:hover {\r\n            color: ${palette.gray[6]}\r\n        }\r\n    }\r\n    p {\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\nconst PostItem = ({post}) => {\r\n    const {publishedDate, user, tags, title, body, _id} = post;\r\n    return (\r\n        <PostItemBlock>\r\n            <h2>\r\n                <Link to={`/@${user.username}/${_id}`}>\r\n                    {title}\r\n                </Link>\r\n            </h2>\r\n            <SubInfo\r\n                username={user.username}\r\n                publishedDate={new Date(publishedDate)}\r\n            />\r\n            <Tags tags={tags}/>\r\n            <p>{body}</p>\r\n        </PostItemBlock>\r\n    )\r\n}\r\n\r\nconst PostList = ({posts, loading, error, showWriteButton}) => {\r\n\r\n    if (error) {\r\n        return <PostListBlock>에러가 발생했습니다.</PostListBlock>\r\n    }\r\n\r\n    return (\r\n        <PostListBlock>\r\n            <WritePostButtonWrapper>\r\n                {showWriteButton && (\r\n                    <Button cyan to=\"/write\">\r\n                        새 글 작성하기\r\n                    </Button>\r\n                )}\r\n            </WritePostButtonWrapper>\r\n            {!loading && posts && (\r\n                <div>\r\n                    {posts.map(post => (\r\n                        <PostItem post={post} key={post._id}/>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </PostListBlock>\r\n    );\r\n};\r\n\r\nexport default PostList;","import {createAction, handleActions} from \"redux-actions\";\r\nimport createRequestSaga,\r\n{createRequestActionTypes}\r\n    from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from \"../lib/api/posts\";\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst [\r\n    LIST_POSTS,\r\n    LIST_POSTS_SUCCESS,\r\n    LIST_POSTS_FAILURE\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n    LIST_POSTS,\r\n    ({tag, username, page}) => ({tag, username, page}),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\n\r\nexport function* postsSaga() {\r\n    yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1,\r\n};\r\n\r\nconst posts = handleActions(\r\n    {\r\n        [LIST_POSTS_SUCCESS]: (state, {payload: posts, meta: response}) => ({\r\n            ...state,\r\n            posts,\r\n            lastPage: parseInt(response.headers['last-page'], 10),\r\n        }),\r\n        [LIST_POSTS_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            error,\r\n        })\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default posts;","import client from './client';\r\nimport qs from 'qs';\r\n\r\nexport const writePost = ({title, body, tags}) =>\r\n    client.post('/api/posts', {title, body, tags});\r\n\r\nexport const readPost = id => client.get(`/api/posts/${id}`);\r\n\r\nexport const listPosts = ({page, username, tag}) => {\r\n    const queryString = qs.stringify({\r\n        page,\r\n        username,\r\n        tag,\r\n    });\r\n    return client.get(`/api/posts?${queryString}`)\r\n}\r\n\r\nexport const updatePost = ({id, title, body, tags}) =>\r\n    client.patch(`/api/posts/${id}`, {\r\n        title,\r\n        body,\r\n        tags,\r\n    });\r\n\r\nexport const removePost = id => client.delete(`/api/posts/${id}`);","import React, {useEffect} from \"react\";\r\nimport qs from \"qs\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport PostList from '../../components/posts/PostList';\r\nimport {listPosts} from '../../modules/posts';\r\n\r\nconst PostListContainer = ({location}) => {\r\n    const dispatch = useDispatch();\r\n    const {posts, error, loading, user} = useSelector(\r\n        ({posts, loading, user}) => ({\r\n            posts: posts.posts,\r\n            error: posts.error,\r\n            loading: loading['posts/LIST_POSTS'],\r\n            user: user.user,\r\n        }),\r\n    );\r\n\r\n    useEffect(() => {\r\n        const {tag, username, page} = qs.parse(location.search, {\r\n            ignoreQueryPrefix: true,\r\n        });\r\n        dispatch(listPosts({tag, username, page}));\r\n    }, [dispatch, location.search]);\r\n\r\n    return (\r\n        <PostList\r\n            loading={loading}\r\n            error={error}\r\n            posts={posts}\r\n            showWriteButton={user}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostListContainer);","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport qs from \"qs\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst PaginationBlock = styled.div`\r\n    width: 320px;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 3rem;\r\n`;\r\n\r\nconst PageNumber = styled.div``;\r\n\r\nconst buildLink = ({username, tag, page}) => {\r\n    const query = qs.stringify({tag, page});\r\n    return username ? `/@${username}?${query}` : `/?${query}`\r\n}\r\n\r\nconst Pagination = ({page, lastPage, username, tag}) => {\r\n    return (\r\n        <PaginationBlock>\r\n            <Button\r\n                disabled={page === 1}\r\n                to={\r\n                    page === 1 ? undefined : buildLink({username, tag, page: page - 1})\r\n                }\r\n            >이전</Button>\r\n            <PageNumber>{page}</PageNumber>\r\n            <Button\r\n                disabled={page === lastPage}\r\n                to={\r\n                    page === lastPage ? undefined : buildLink({username, tag, page: page + 1})\r\n                }\r\n            >다음</Button>\r\n        </PaginationBlock>\r\n    );\r\n};\r\n\r\nexport default Pagination;","import React from \"react\";\r\nimport Pagination from \"../../components/posts/Pagination\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport qs from \"qs\";\r\n\r\nconst PaginationContainer = ({location}) => {\r\n    const {lastPage, posts, loading} = useSelector(({posts, loading}) => ({\r\n        lastPage: posts.lastPage,\r\n        posts: posts.posts,\r\n        loading: loading['posts/LIST_POSTS'],\r\n    }));\r\n\r\n    if (!posts || loading) return null;\r\n\r\n    const {tag, username, page = 1} = qs.parse(location.search, {\r\n        ignoreQueryPrefix: true,\r\n    });\r\n\r\n    return (\r\n        <Pagination\r\n            tag={tag}\r\n            username={username}\r\n            page={parseInt(page, 10)}\r\n            lastPage={lastPage}\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PaginationContainer);","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostListContainer from \"../containers/posts/PostListContainer\";\r\nimport PaginationContainer from \"../containers/posts/PaginationContainer\";\r\n\r\nconst PostListPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostListContainer/>\r\n            <PaginationContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostListPage;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n/*\r\n * 회원가입/로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\r\n */\r\n\r\nconst AuthTemplateBlock = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    background: ${palette.gray[2]};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst WhiteBox = styled.div`\r\n    .logo-area {\r\n        display: block;\r\n        padding-bottom: 2rem;\r\n        text-align: center;\r\n        font-weight: bold;\r\n        letter-spacing: 2px;\r\n    }\r\n    box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\r\n    padding: 2rem;\r\n    width: 360px;\r\n    background: white;\r\n    border-radius: 2px;\r\n`;\r\n\r\nconst AuthTemplate = ({children}) => {\r\n    return (\r\n        <AuthTemplateBlock>\r\n            <WhiteBox>\r\n                <div className=\"logo-area\">\r\n                    <Link to=\"/\">REACTERS</Link>\r\n                </div>\r\n                {children}\r\n            </WhiteBox>\r\n        </AuthTemplateBlock>\r\n    );\r\n};\r\n\r\nexport default AuthTemplate;","import {createAction, handleActions} from 'redux-actions';\r\nimport produce from 'immer';\r\nimport {takeLatest} from 'redux-saga/effects';\r\nimport createRequestSaga, {createRequestActionTypes} from \"../lib/createRequestSaga\";\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\r\n\r\nexport const changeField = createAction(\r\n    CHANGE_FIELD,\r\n    ({form, key, value}) => ({\r\n        form, // register, login\r\n        key, // username, password, passwordConfirm\r\n        value, // 실제 바꾸려는 값\r\n    })\r\n);\r\n\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); //register/login\r\n\r\nexport const register = createAction(REGISTER, ({username, password}) => ({\r\n    username, password,\r\n}));\r\nexport const login = createAction(LOGIN, ({username, password}) => ({\r\n    username, password,\r\n}));\r\n\r\n// 사가 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\n\r\nexport function* authSaga() {\r\n    yield takeLatest(REGISTER, registerSaga);\r\n    yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n    register: {\r\n        username: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n    },\r\n    login: {\r\n        username: '',\r\n        password: '',\r\n    },\r\n    auth: null,\r\n    authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n    {\r\n        [CHANGE_FIELD]: (state, {payload: {form, key, value}}) =>\r\n            produce(state, draft => {\r\n                draft[form][key] = value;\r\n            }),\r\n        [INITIALIZE_FORM]: (state, {payload: form}) => ({\r\n            ...state,\r\n            [form]: initialState[form],\r\n            authError: null, // 폼 전환 시 회원 인증 에러 초기화\r\n        }),\r\n        // 회원가입 성공\r\n        [REGISTER_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        // 회원가입 실패\r\n        [REGISTER_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            authError: error,\r\n        }),\r\n        // 로그인 성공\r\n        [LOGIN_SUCCESS]: (state, {payload: auth}) => ({\r\n            ...state,\r\n            authError: null,\r\n            auth,\r\n        }),\r\n        // 로그인 실패\r\n        [LOGIN_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            authError: error,\r\n        })\r\n    }\r\n    ,\r\n    initialState,\r\n);\r\n\r\nexport default auth;","import React from \"react\";\r\nimport styled from 'styled-components';\r\nimport palette from \"../../lib/styles/palette\";\r\nimport {Link} from 'react-router-dom';\r\nimport Button from '../common/Button';\r\n\r\n/*\r\n * 회원가입 또는 로그인 폼을 보여 줍니다.\r\n */\r\n\r\nconst AuthFormBlock = styled.div`\r\n    h3 {\r\n        margin: 0;\r\n        color: ${palette.gray[8]};\r\n        margin-bottom: 1rem;\r\n    }\r\n`;\r\n\r\n/*\r\n * 스타일링된 input\r\n */\r\nconst StyledInput = styled.input`\r\n    font-size: 1rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[5]};\r\n    padding-bottom: 0.5rem;\r\n    outline: none;\r\n    width: 100%;\r\n    &:focus {\r\n        color: $oc-teal-7;\r\n        border-bottom: 1px solid ${palette.gray[7]};\r\n    }\r\n    & + & {\r\n        margin-top: 1rem;\r\n    }\r\n`;\r\n\r\n/*\r\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여 줌\r\n */\r\nconst Footer = styled.div`\r\n    margin-top: 2rem;\r\n    text-align: right;\r\n    a {\r\n        color: ${palette.gray[6]};\r\n        text-decoration: underline;\r\n        &:hover {\r\n            color: ${palette.gray[9]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst ButtonWidthMarginTop = styled(Button)`\r\n    margin-top: 1rem;\r\n`;\r\n\r\n/*\r\n 에러를 보여 줍니다.\r\n */\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    text-align: center;\r\n    font-size: 0.8/75rem;\r\n    margin-top: 1rem;\r\n`;\r\n\r\nconst textMap = {\r\n    login: '로그인',\r\n    register: '회원가입',\r\n};\r\n\r\nconst AuthForm = ({type, form, onChange, onSubmit, error}) => {\r\n    const text = textMap[type];\r\n    return (\r\n        <AuthFormBlock>\r\n            <h3>{text}</h3>\r\n            <form onSubmit={onSubmit}>\r\n                <StyledInput\r\n                    autoComplete=\"username\"\r\n                    name=\"username\"\r\n                    placeholder=\"아이디\"\r\n                    onChange={onChange}\r\n                    value={form.username}\r\n                />\r\n                <StyledInput\r\n                    autoComplete=\"new-password\"\r\n                    name=\"password\"\r\n                    placeholder=\"비밀번호\"\r\n                    type=\"password\"\r\n                    onChange={onChange}\r\n                    value={form.password}\r\n                />\r\n                {type === 'register' && (\r\n                    <StyledInput\r\n                        authComplete=\"new-password\"\r\n                        name=\"passwordConfirm\"\r\n                        placeholder=\"비밀번호 확인\"\r\n                        type=\"password\"\r\n                        onChange={onChange}\r\n                        value={form.passwordConfirm}\r\n                    />\r\n                )}\r\n                {error && <ErrorMessage>{error}</ErrorMessage>}\r\n                <ButtonWidthMarginTop cyan fullWidth>{text}</ButtonWidthMarginTop>\r\n            </form>\r\n            <Footer>\r\n                {type === 'login' ? (\r\n                    <Link to=\"/register\">회원가입</Link>\r\n                ) : (\r\n                    <Link to=\"/login\">로그인</Link>\r\n                )}\r\n            </Footer>\r\n        </AuthFormBlock>\r\n    );\r\n};\r\n\r\nexport default AuthForm;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeField, initializeForm, login} from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {check} from '../../modules/user';\r\n\r\nconst LoginForm = ({history}) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.login,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n    }));\r\n\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(changeField({\r\n            form: 'login',\r\n            key: name,\r\n            value\r\n        }))\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password} = form;\r\n        dispatch(login({username, password}));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form 을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initializeForm('login'));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('===== LoginForm =====>', '오류 발생');\r\n            console.log('===== LoginForm =====>', authError);\r\n            setError('로그인 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('===== LoginForm =====>', '로그인 성공');\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/');\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <AuthForm type=\"login\" form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\r\n    );\r\n};\r\n\r\nexport default withRouter(LoginForm);","import React from \"react\";\r\nimport AuthTemplate from \"../components/auth/AuthTemplate\";\r\nimport LoginForm from \"../containers/auth/LoginForm\";\r\n\r\nconst LoginPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <LoginForm/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default LoginPage;","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeField, initializeForm, register} from \"../../modules/auth\";\r\nimport AuthForm from \"../../components/auth/AuthForm\";\r\nimport {check} from \"../../modules/user\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst RegisterForm = ({history}) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const {form, auth, authError, user} = useSelector(({auth, user}) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user,\r\n    }));\r\n\r\n    // 인풋 변경 이벤트 핸들러\r\n    const onChange = e => {\r\n        const {value, name} = e.target;\r\n        dispatch(changeField({\r\n            form: 'register',\r\n            key: name,\r\n            value\r\n        }))\r\n    };\r\n\r\n    // 폼 등록 이벤트 핸들러\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const {username, password, passwordConfirm} = form;\r\n        if ([username, password, passwordConfirm].includes('')) {\r\n            setError('빈 칸을 모두 입력하세요.');\r\n            return;\r\n        }\r\n        if (password !== passwordConfirm) {\r\n            setError('비밀번호가 일치하지 않습니다.');\r\n            changeField({form: 'register', key: 'password', value: ''});\r\n            changeField({form: 'register', key: 'passwordConfirm', value: ''});\r\n            return;\r\n        }\r\n        dispatch(register({username, password}));\r\n    };\r\n\r\n    // 컴포넌트가 처음 렌더링될 때 form 을 초기화함\r\n    useEffect(() => {\r\n        dispatch(initializeForm('register'));\r\n    }, [dispatch]);\r\n\r\n    // 회원가입 성공/실패 처리\r\n    useEffect(() => {\r\n        if (authError) {\r\n            console.log('오류 발생');\r\n            console.log(authError);\r\n            // 계정명이 이미 존재할 때\r\n            if (authError.response.status == 409) {\r\n                setError('이미 존재하는 계정명입니다.');\r\n                return;\r\n            }\r\n            // 기타 이유\r\n            setError('회원가입 실패');\r\n            return;\r\n        }\r\n        if (auth) {\r\n            console.log('회원가입 성공');\r\n            console.log(auth);\r\n            dispatch(check());\r\n        }\r\n    }, [auth, authError, dispatch]);\r\n\r\n    // user 값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push('/') // 홈 화면으로 이동\r\n            try {\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n            } catch (e) {\r\n                console.log('localStorage is not working');\r\n            }\r\n        }\r\n    }, [history, user]);\r\n\r\n    return (\r\n        <AuthForm type=\"register\" form={form} onChange={onChange} onSubmit={onSubmit} error={error}/>\r\n    );\r\n};\r\n\r\nexport default withRouter(RegisterForm);","import React from \"react\";\r\nimport AuthTemplate from \"../components/auth/AuthTemplate\";\r\nimport RegisterForm from \"../containers/auth/RegisterForm\";\r\n\r\nconst RegisterPage = () => {\r\n    return (\r\n        <AuthTemplate>\r\n            <RegisterForm/>\r\n        </AuthTemplate>\r\n    );\r\n};\r\n\r\nexport default RegisterPage;","import React, {useRef, useEffect} from \"react\";\r\nimport Quill from \"quill\";\r\nimport \"quill/dist/quill.bubble.css\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport Responsive from \"../common/Responsive\";\r\n\r\nconst EditorBlock = styled(Responsive)`\r\n    padding-top: 5rem;\r\n    padding-bottom: 5rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n    font-size: 3rem;\r\n    outline: none;\r\n    padding-bottom: 0.5rem;\r\n    border: none;\r\n    border-bottom: 1px solid ${palette.gray[4]};\r\n    margin-bottom: 2rem;\r\n    width: 100%;\r\n`;\r\n\r\nconst QuillWrapper = styled.div`\r\n    .ql-editor {\r\n        padding: 0;\r\n        min-height: 320px;\r\n        font-size: 1.125rem;\r\n        line-height: 1.5;\r\n    }\r\n   \r\n    .ql-editor .ql-blank::before {\r\n        left: 0px;\r\n    }\r\n`;\r\n\r\nconst Editor = ({title, body, onChangeField}) => {\r\n    const quillElement = useRef(null);\r\n    const quillInstance = useRef(null);\r\n\r\n    useEffect(() => {\r\n        quillInstance.current = new Quill(quillElement.current, {\r\n            theme: 'bubble',\r\n            placeholder: '내용을 작성하세요...',\r\n            modules: {\r\n                toolbar: [\r\n                    [{header: '1'}, {header: '2'}],\r\n                    ['bold', 'italic', 'underline', 'strike'],\r\n                    [{list: 'ordered'}, {list: 'bullet'}],\r\n                    ['blockquote', 'code-block', 'link', 'image'],\r\n                ],\r\n            },\r\n        });\r\n\r\n        const quill = quillInstance.current;\r\n        quill.on('text-change', (delta, oldDelta, source) => {\r\n            if (source === 'user') {\r\n                onChangeField({key: 'body', value: quill.root.innerHTML});\r\n            }\r\n        });\r\n    }, [onChangeField]);\r\n\r\n    const mounted = useRef(false);\r\n    useEffect(() => {\r\n        if (mounted.current) return;\r\n        mounted.current = true;\r\n        quillInstance.current.root.innerHTML = body;\r\n    }, [body]);\r\n\r\n    const onChangeTitle = e => {\r\n        onChangeField({key: 'title', value: e.target.value});\r\n    }\r\n\r\n    return (\r\n        <EditorBlock>\r\n            <TitleInput\r\n                placeholder=\"제목을 입력하세요\"\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n            />\r\n            <QuillWrapper>\r\n                <div ref={quillElement}/>\r\n            </QuillWrapper>\r\n        </EditorBlock>\r\n    );\r\n};\r\n\r\nexport default Editor;","import {createAction, handleActions} from 'redux-actions';\r\nimport createRequestSaga, {createRequestActionTypes} from \"../lib/createRequestSaga\";\r\nimport * as postAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n    WRITE_POST,\r\n    WRITE_POST_SUCCESS,\r\n    WRITE_POST_FAILURE\r\n] = createRequestActionTypes('write/WRITE_POST');\r\nconst [\r\n    UPDATE_POST,\r\n    UPDATE_POST_SUCCESS,\r\n    UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST');\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({key, value}) => ({\r\n    key,\r\n    value,\r\n}));\r\n\r\nexport const writePost = createAction(WRITE_POST, ({title, body, tags}) => ({\r\n    title,\r\n    body,\r\n    tags,\r\n}));\r\n\r\nexport const updatePost = createAction(UPDATE_POST, ({id, title, body, tags}) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n}));\r\n\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\n\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n    yield takeLatest(WRITE_POST, writePostSaga);\r\n    yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    title: '',\r\n    body: '',\r\n    tags: [],\r\n    post: null,\r\n    postError: null,\r\n    originalPostId: null,\r\n};\r\n\r\nconst write = handleActions({\r\n        [INITIALIZE]: state => initialState,\r\n        [CHANGE_FIELD]: (state, {payload: {key, value}}) => ({\r\n            ...state,\r\n            [key]: value,\r\n        }),\r\n        [WRITE_POST]: state => ({\r\n            ...state,\r\n            post: null,\r\n            postError: null,\r\n        }),\r\n        [WRITE_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [WRITE_POST_FAILURE]: (state, {payload: postError}) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n        [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\r\n            ...state,\r\n            title: post.title,\r\n            body: post.body,\r\n            tags: post.tags,\r\n            originalPostId: post._id,\r\n        }),\r\n        [UPDATE_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [UPDATE_POST_FAILURE]: (state, {payload: postError}) => ({\r\n            ...state,\r\n            postError,\r\n        }),\r\n\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default write;","import React, {useCallback, useEffect} from \"react\";\r\nimport Editor from \"../../components/write/Editor\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {changeField, initialize} from \"../../modules/write\";\r\n\r\nconst EditorContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {title, body} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n    }));\r\n    const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\r\n        dispatch,\r\n    ]);\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(initialize());\r\n        };\r\n    }, [dispatch]);\r\n    return (\r\n        <Editor onChangeField={onChangeField} title={title} body={body}/>\r\n    );\r\n};\r\n\r\nexport default EditorContainer;","import React, {useState, useCallback, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\n\r\nconst TagBoxBlock = styled.div`\r\n    width: 100%;\r\n    border-top: 1px solid ${palette.gray[2]};\r\n    padding-top: 2rem;\r\n    \r\n    h4 {\r\n        color: ${palette.gray[8]};\r\n        margin-top: 0;\r\n        margin-bottom: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n    border-radius: 4px;\r\n    overflow: hidden;\r\n    display: flex;\r\n    width: 256px;\r\n    border: 1px solid ${palette.gray[9]};\r\n    input,\r\n    button {\r\n        outline: none;\r\n        border: none;\r\n        font-size: .9rem;\r\n    }\r\n    \r\n    input {\r\n        padding: 0.5rem;\r\n        flex: 1;\r\n    }\r\n    button {\r\n        cursor: pointer;\r\n        padding-right: 1rem;\r\n        padding-left: 1rem;\r\n        border: none;\r\n        background: ${palette.gray[8]};\r\n        color: white;\r\n        font-weight: bold;\r\n        &:hover {\r\n            background: ${palette.gray[6]};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n    margin-right: 0.5rem;\r\n    color: ${palette.gray[6]};\r\n    cursor: pointer;\r\n    &:hover {\r\n        opacity: 0.5;\r\n    }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n    display: flex;\r\n    margin-top: 0.5rem;\r\n`;\r\n\r\nconst TagItem = React.memo(({tag, onRemove}) => <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>);\r\n\r\nconst TagList = React.memo(({tags, onRemove}) => (\r\n    <TagListBlock>\r\n        {tags.map(tag => (\r\n            <TagItem key={tag} tag={tag} onRemove={onRemove}/>\r\n        ))}\r\n    </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({tags, onChangeTags}) => {\r\n    const [input, setInput] = useState('');\r\n    const [localTags, setLocalTags] = useState([]);\r\n\r\n    const insertTag = useCallback(tag => {\r\n            if (!tag) return;\r\n            if (localTags.includes(tag)) return;\r\n            const nextTags = [...localTags, tag];\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        }, [localTags, onChangeTags],\r\n    );\r\n\r\n    const onRemove = useCallback(\r\n        tag => {\r\n            const nextTags = localTags.filter(t => t !== tag);\r\n            setLocalTags(nextTags);\r\n            onChangeTags(nextTags);\r\n        },\r\n        [localTags, onChangeTags],\r\n    );\r\n\r\n    const onChange = useCallback(e => {\r\n        setInput(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            insertTag(input.trim());\r\n            setInput('');\r\n        },\r\n        [input, insertTag],\r\n    );\r\n\r\n    useEffect(() => {\r\n        setLocalTags(tags);\r\n    }, [tags]);\r\n\r\n    return (\r\n        <TagBoxBlock>\r\n            <h4>태그</h4>\r\n            <TagForm onSubmit={onSubmit}>\r\n                <input\r\n                    placeholder=\"태그를 입력하세요\"\r\n                    value={input}\r\n                    onChange={onChange}\r\n                />\r\n                <button type=\"submit\">추가</button>\r\n            </TagForm>\r\n            <TagList tags={localTags} onRemove={onRemove}/>\r\n        </TagBoxBlock>\r\n    );\r\n};\r\n\r\nexport default TagBox;","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport TagBox from '../../components/write/TagBox';\r\nimport {changeField} from \"../../modules/write\";\r\n\r\nconst TagBoxContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const tags = useSelector(state => state.write.tags);\r\n\r\n    const onChangeTags = nextTags => {\r\n        dispatch(\r\n            changeField({\r\n                key: 'tags',\r\n                value: nextTags,\r\n            }),\r\n        );\r\n    };\r\n    return (\r\n        <TagBox onChangeTags={onChangeTags} tags={tags}/>\r\n    );\r\n};\r\n\r\nexport default TagBoxContainer;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst WriteActionButtonsBlock = styled.div`\r\n    margin-top: 1rem;\r\n    margin-bottom: 3rem;\r\n    button + button {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    height: 2.125rem;\r\n    padding: 0 1rem;\r\n    & + & {\r\n        margin-left: 0.5rem;\r\n    }\r\n`;\r\n\r\nconst WriteActionButtons = ({onCancel, onPublish, isEdit}) => {\r\n    return (\r\n        <WriteActionButtonsBlock>\r\n            <StyledButton cyan onClick={onPublish}>\r\n                포스트 {isEdit ? '수정' : '등록'}\r\n            </StyledButton>\r\n            <StyledButton onClick={onCancel}>취소</StyledButton>\r\n        </WriteActionButtonsBlock>\r\n    );\r\n};\r\n\r\nexport default WriteActionButtons;","import React, {useEffect} from \"react\";\r\nimport WriteActionButtons from \"../../components/write/WriteActionButtons\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {writePost, updatePost} from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({history}) => {\r\n    const dispatch = useDispatch();\r\n    const {title, body, tags, post, postError, originalPostId} = useSelector(({write}) => ({\r\n        title: write.title,\r\n        body: write.body,\r\n        tags: write.tags,\r\n        post: write.post,\r\n        postError: write.postError,\r\n        originalPostId: write.originalPostId,\r\n    }));\r\n    const onPublish = () => {\r\n        if (originalPostId) {\r\n            dispatch(updatePost({title, body, tags, id: originalPostId}));\r\n            return;\r\n        }\r\n        dispatch(\r\n            writePost({\r\n                title,\r\n                body,\r\n                tags,\r\n            }),\r\n        );\r\n    };\r\n\r\n    const onCancel = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (post) {\r\n            const {_id, user} = post;\r\n            history.push(`/@${user.username}/${_id}`);\r\n        }\r\n        if (postError) {\r\n            console.log(postError);\r\n        }\r\n    }, [history, post, postError]);\r\n\r\n    return (\r\n        <WriteActionButtons\r\n            onPublish={onPublish}\r\n            onCancel={onCancel}\r\n            isEdit={!!originalPostId}/>\r\n    );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);","import React from \"react\";\r\nimport Responsive from \"../components/common/Responsive\";\r\nimport EditorContainer from \"../containers/write/EditorContainer\";\r\nimport TagBoxContainer from \"../containers/write/TagBoxContainer\";\r\nimport WriteActionButtonsContainer from \"../containers/write/WriteActionButtonsContainer\";\r\nimport {Helmet} from 'react-helmet-async';\r\n\r\nconst WritePage = () => {\r\n    return (\r\n        <Responsive>\r\n            <Helmet>\r\n                <title>글 작성하기 - REACTERS</title>\r\n            </Helmet>\r\n            <EditorContainer/>\r\n            <TagBoxContainer/>\r\n            <WriteActionButtonsContainer/>\r\n        </Responsive>\r\n    );\r\n};\r\n\r\nexport default WritePage;","import {createAction, handleActions} from 'redux-actions';\r\nimport createRequestSaga, {createRequestActionTypes} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport {takeLatest} from 'redux-saga/effects';\r\n\r\nconst [\r\n    READ_POST,\r\n    READ_POST_SUCCESS,\r\n    READ_POST_FAILURE\r\n] = createRequestActionTypes('post/READ_POST');\r\nconst UNLOAD_POST = 'post/UNLOAD_POST';\r\n\r\nexport const readPost = createAction(READ_POST, id => id);\r\nexport const unloadPost = createAction(UNLOAD_POST);\r\n\r\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\r\n\r\nexport function* postSaga() {\r\n    yield takeLatest(READ_POST, readPostSaga);\r\n}\r\n\r\nconst initialState = {\r\n    post: null,\r\n    error: null,\r\n};\r\n\r\nconst post = handleActions({\r\n        [READ_POST_SUCCESS]: (state, {payload: post}) => ({\r\n            ...state,\r\n            post,\r\n        }),\r\n        [READ_POST_FAILURE]: (state, {payload: error}) => ({\r\n            ...state,\r\n            error,\r\n        }),\r\n        [UNLOAD_POST]: () => initialState,\r\n    },\r\n    initialState\r\n);\r\n\r\nexport default post;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport SubInfo from \"../common/SubInfo\";\r\nimport Tags from '../common/Tags'\r\nimport Responsive from \"../common/Responsive\";\r\nimport {Helmet} from 'react-helmet-async';\r\n\r\nconst PostViewerBlock = styled(Responsive)`\r\n    margin-top: 4rem;\r\n`;\r\n\r\nconst PostHead = styled.div`\r\n    border-bottom: 1px solid ${palette.gray[2]};\r\n    padding-bottom: 3rem;\r\n    margin-bottom: 3rem;\r\n    h1 {\r\n        font-sie: 3rem;\r\n        line-height: 1.5;\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\nconst PostContent = styled.div`\r\n    font-size: 1.3125rem;\r\n    color: ${palette.gray[8]};\r\n`;\r\n\r\nconst PostViewer = ({post, error, loading, actionButtons}) => {\r\n    // 에러 발생 시\r\n    if (error) {\r\n        if (error.response && error.response.status === 404) {\r\n            return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>\r\n        }\r\n        return <PostViewerBlock>오류 발생!</PostViewerBlock>\r\n    }\r\n\r\n    if (loading || !post) {\r\n        return null;\r\n    }\r\n\r\n    const {title, body, user, publishedDate, tags} = post;\r\n\r\n    return (\r\n        <PostViewerBlock>\r\n            <Helmet>\r\n                <title>{title} - REACTERS</title>\r\n            </Helmet>\r\n            <PostHead>\r\n                <h1>{title}</h1>\r\n                <SubInfo username={user.username}\r\n                         publishedDate={new Date(publishedDate).toLocaleDateString()}\r\n                         hasMarginTop/>\r\n                <Tags tags={tags}/>\r\n            </PostHead>\r\n            {actionButtons}\r\n            <PostContent\r\n                dangerouslySetInnerHTML={{__html: body}}\r\n            />\r\n        </PostViewerBlock>\r\n    );\r\n};\r\n\r\nexport default PostViewer;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"./Button\";\r\n\r\nconst Fullscreen = styled.div`\r\n    position: fixed;\r\n    z-index: 30;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: rgba(0, 0, 0, 0.25);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n    width: 320px;\r\n    background: white;\r\n    padding: 1.5rem;\r\n    border-radius: 4px;\r\n    box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n    h2 {\r\n        margin-top: 0;\r\n        margin-bottom: 1rem;\r\n    }\r\n    p {\r\n        margin-bottom: 3rem;\r\n    }\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n    }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n    height: 2rem;\r\n    & + & {\r\n        margin-left: 0.75rem;\r\n    }\r\n`;\r\n\r\nconst AskModal = ({\r\n                      visible,\r\n                      title,\r\n                      description,\r\n                      confirmText = '확인',\r\n                      cancelText = '취소',\r\n                      onConfirm,\r\n                      onCancel,\r\n                  }) => {\r\n    if (!visible) return null;\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <h2>{title}</h2>\r\n                <p>{description}</p>\r\n                <div className=\"buttons\">\r\n                    <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\r\n                    <StyledButton cyan onClick={onConfirm}>{confirmText}</StyledButton>\r\n                </div>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    );\r\n};\r\n\r\nexport default AskModal","import React from \"react\";\r\nimport AskModal from \"../common/AskModal\";\r\n\r\nconst AskRemoveModal = ({visible, onConfirm, onCancel}) => {\r\n    return (\r\n        <AskModal\r\n            visible={visible}\r\n            title=\"포스트 삭제\"\r\n            description=\"포스트를 정말 삭제하시겠습니까?\"\r\n            confirmText=\"삭제\"\r\n            onConfirm={onConfirm}\r\n            onCancel={onCancel}\r\n        >\r\n        </AskModal>\r\n    );\r\n};\r\n\r\nexport default AskRemoveModal;","import React, {useState, useCallback} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport palette from \"../../lib/styles/palette\";\r\nimport AskRemoveModal from \"./AskRemoveModal\";\r\n\r\nconst PostActionButtonBlock = styled.div`\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    margin-bottom: 2rem;\r\n    margin-top: -1.5rem;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n    padding: 0.25rem 0.5rem;\r\n    border-radius: 4px;\r\n    color: ${palette.gray[6]};\r\n    font-weight: bold;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 0.875rem;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: ${palette.gray[1]};\r\n        color: ${palette.cyan[7]};\r\n    }\r\n    & + & {\r\n        margin-left: 0.25rem;\r\n    }\r\n`;\r\n\r\nconst PostActionButtons = ({onEdit, onRemove}) => {\r\n    const [modal, setModal] = useState(false);\r\n    const onRemoveClick = () => {\r\n        setModal(true);\r\n    };\r\n    const onCancel = () => {\r\n        setModal(false);\r\n    };\r\n    const onConfirm = () => {\r\n        setModal(false);\r\n        onRemove();\r\n    };\r\n    return (\r\n        <>\r\n            <PostActionButtonBlock>\r\n                <ActionButton onClick={onEdit}>수정</ActionButton>\r\n                <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\r\n            </PostActionButtonBlock>\r\n            <AskRemoveModal\r\n                visible={modal}\r\n                onConfirm={onConfirm}\r\n                onCancel={onCancel}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostActionButtons;","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom';\r\nimport {readPost, unloadPost} from \"../../modules/post\";\r\nimport PostViewer from \"../../components/post/PostViewer\";\r\nimport PostActionButtons from \"../../components/post/PostActionButtons\";\r\nimport {setOriginalPost} from \"../../modules/write\";\r\nimport {removePost} from \"../../lib/api/posts\";\r\n\r\nconst PostViewerContainer = ({match, history}) => {\r\n    const {postId} = match.params;\r\n    const dispatch = useDispatch();\r\n    const {post, error, loading, user} = useSelector(({post, loading, user}) => ({\r\n        post: post.post,\r\n        error: post.error,\r\n        loading: loading['post/READ_POST'],\r\n        user: user.user,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(readPost(postId));\r\n        return () => {\r\n            dispatch(unloadPost());\r\n        };\r\n    }, [dispatch, postId]);\r\n\r\n    const onEdit = () => {\r\n        dispatch(setOriginalPost(post));\r\n        history.push('/write');\r\n    }\r\n\r\n    const onRemove = async () => {\r\n        try {\r\n            console.log(postId);\r\n            await removePost(postId);\r\n            history.push('/');\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const ownPost = (user && user._id) === (post && post.user._id);\r\n\r\n    return (\r\n        <PostViewer post={post}\r\n                    loading={loading}\r\n                    error={error}\r\n                    actionButtons={\r\n                        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove}/>\r\n                    }\r\n        />\r\n    );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);","import React from \"react\";\r\nimport HeaderContainer from \"../containers/common/HeaderContainer\";\r\nimport PostViewerContainer from \"../containers/post/PostViewerContainer\";\r\n\r\nconst PostPage = () => {\r\n    return (\r\n        <>\r\n            <HeaderContainer/>\r\n            <PostViewerContainer/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PostPage;","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport PostListPage from \"./pages/PostListPage\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport RegisterPage from \"./pages/RegisterPage\";\r\nimport WritePage from \"./pages/WritePage\";\r\nimport PostPage from \"./pages/PostPage\";\r\nimport {Helmet} from 'react-helmet-async';\r\n\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>REACTERS</title>\r\n            </Helmet>\r\n            <Route component={PostListPage} path={['/@:username', '/']} exact/>\r\n            <Route component={LoginPage} path=\"/login\"/>\r\n            <Route component={RegisterPage} path=\"/register\"/>\r\n            <Route component={WritePage} path=\"/write\"/>\r\n            <Route component={PostPage} path=\"/@:username/:postId\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from \"redux\";\r\nimport {all} from 'redux-saga/effects';\r\nimport auth, {authSaga} from './auth'\r\nimport loading from \"./loding\";\r\nimport user, {userSaga} from \"./user\";\r\nimport write, {writeSaga} from './write';\r\nimport post, {postSaga} from \"./post\";\r\nimport posts, {postsSaga} from \"./posts\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth,\r\n    loading,\r\n    user,\r\n    write,\r\n    post,\r\n    posts\r\n});\r\n\r\nexport function* rootSaga() {\r\n    yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga()]);\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, {rootSaga} from \"./modules\";\r\nimport {tempSetUser, check} from \"./modules/user\";\r\nimport {HelmetProvider} from \"react-helmet-async\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)),);\r\n\r\nfunction loadUser() {\r\n    try {\r\n        const user = localStorage.getItem('user');\r\n        if (!user) return;\r\n\r\n        store.dispatch(tempSetUser(user));\r\n        store.dispatch(check());\r\n    } catch (e) {\r\n        console.log('localStorage is not working!');\r\n    }\r\n}\r\n\r\nsagaMiddleware.run(rootSaga);\r\nloadUser();\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <HelmetProvider>\r\n                <App/>\r\n            </HelmetProvider>\r\n        </BrowserRouter>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}